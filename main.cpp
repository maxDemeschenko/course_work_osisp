#include <filesystem>
#include <iostream>
#include <vector>
#include <memory>
#include "ConfigLoader.hpp"
#include "VaultService.hpp"
#include "ChecksumService.hpp"
#include "InitializationService.hpp"
#include "TrackingFile.hpp"
#include "StatePersistenceService.hpp"
#include "InotifyWatcher.hpp"
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <csignal>
#include <iostream>
#include <fstream>

void processFile(const std::filesystem::path& filePath,
                 InitializationService& initializer,
                 ChecksumService& checksum,
                 VaultService& vault,
                 StatePersistenceService& dbService,
                 std::vector<TrackingFile>& trackedFilesFromDb,
                 std::vector<TrackingFile>& trackedFilesOut) {
    try {
        auto it = std::find_if(trackedFilesFromDb.begin(), trackedFilesFromDb.end(),
                               [&](const TrackingFile& file) {
                                   return file.filePath == filePath;
                               });

        if (it == trackedFilesFromDb.end()) {
            // –ù–æ–≤—ã–π —Ñ–∞–π–ª ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            TrackingFile tf = initializer.initialize(filePath.string());
            trackedFilesOut.push_back(tf);
            dbService.createTrackingFile(tf);
            std::cout << "  ‚Üí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: " << filePath << std::endl;
        } else {
            // –§–∞–π–ª —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º —Ö–µ—à
            TrackingFile file = *it;  // –ö–æ–ø–∏—è, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
            std::string currentChecksum = checksum.compute(file.filePath);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ–∑–µ—Ä–≤ —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º —Ö–µ—à–µ–º
            bool hasBackup = false;
            for (const auto& change : file.history.changes) {
                if (currentChecksum == file.lastChecksum && vault.exists(change.savedVersionId)) {
                    hasBackup = true;
                    break;
                }
            }

            if (!hasBackup && !file.lastChecksum.empty()) {
                std::cout << "  ‚ö† –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ..." << std::endl;
                
                FileChange change = FileChange();
                std::string restoredId = vault.save(file.filePath); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ç–µ–º –∂–µ ID
                change.savedVersionId = restoredId;
                change.changeType = "Restore of reserve copy";
                change.checksum = checksum.compute(file.filePath);
                change.timestamp = std::chrono::system_clock::now();
                dbService.saveFileChange(file.fileId, change);

                std::cout << "  ‚úî –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " << restoredId << std::endl;
            }

            trackedFilesOut.push_back(file);
        }
    } catch (const std::exception& ex) {
        std::cerr << "  ‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ " << filePath << ": " << ex.what() << std::endl;
    }
}


void processDirectory(const std::filesystem::path& dirPath,
                      InitializationService& initializer,
                      ChecksumService& checksum,
                      VaultService& vault,
                      StatePersistenceService& dbService,
                      std::vector<TrackingFile>& trackedFilesFromDb,
                      std::vector<TrackingFile>& trackedFilesOut,
                      bool recursive) {
    if (!std::filesystem::exists(dirPath) || !std::filesystem::is_directory(dirPath)) {
        std::cerr << "–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: " << dirPath << std::endl;
        return;
    }

    try {
        if (recursive) {
            for (const auto& entry : std::filesystem::recursive_directory_iterator(dirPath)) {
                if (std::filesystem::is_regular_file(entry)) {
                    processFile(entry.path(), initializer, checksum, vault, dbService, trackedFilesFromDb, trackedFilesOut);
                }
            }
        } else {
            for (const auto& entry : std::filesystem::directory_iterator(dirPath)) {
                if (std::filesystem::is_regular_file(entry)) {
                    processFile(entry.path(), initializer, checksum, vault, dbService, trackedFilesFromDb, trackedFilesOut);
                }
            }
        }
    } catch (const std::filesystem::filesystem_error& fe) {
        std::cerr << "  ‚ö† –û—à–∏–±–∫–∞ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ " << dirPath << ": " << fe.what() << std::endl;
    }
}

std::vector<TrackingFile> loadAndProcessConfiguration(const std::string& configPath,
                                                      InitializationService& initializer,
                                                      ChecksumService& checksum,
                                                      VaultService& vault,
                                                      StatePersistenceService& dbService) {
    ConfigLoader loader(configPath);
    if (!loader.load()) {
        throw std::runtime_error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!");
    }

    const auto& groups = loader.getMonitoringGroups();
    std::cout << "–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥—Ä—É–ø–ø: " << groups.size() << std::endl;

    std::vector<TrackingFile> trackedFilesFromDb = dbService.loadTrackedFiles();
    std::vector<TrackingFile> trackedFiles;

    for (const auto& group : groups) {
        std::cout << "–ì—Ä—É–ø–ø–∞ ID: " << group.id << "\n–û–ø–∏—Å–∞–Ω–∏–µ: " << group.description << std::endl;

        for (const auto& path : group.paths) {
            if (std::filesystem::is_regular_file(path.path)) {
                processFile(path.path, initializer, checksum, vault, dbService, trackedFilesFromDb, trackedFiles);
            }
            else if (std::filesystem::is_directory(path.path)) {
                std::cout << "  ‚Üí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: " << path.path << std::endl;
                processDirectory(path.path, initializer, checksum, vault, dbService, trackedFilesFromDb, trackedFiles, path.recursive);
            }
        }

        std::cout << "-------------------------------" << std::endl;
    }

    return trackedFiles;
}

std::atomic<bool> running = true;

void signalHandler(int) {
    running = false;
}


int main() {

        pid_t pid = fork();
    if (pid < 0) {
        std::cerr << "–û—à–∏–±–∫–∞ fork()" << std::endl;
        return 1;
    }
    if (pid > 0) {
        std::cout << "–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω —Å PID " << pid << std::endl;
        return 0;  // —Ä–æ–¥–∏—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    if (setsid() < 0) {
        std::cerr << "–û—à–∏–±–∫–∞ setsid()" << std::endl;
        return 1;
    }

    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    close(STDIN_FILENO);
    close(STDOUT_FILENO);
    close(STDERR_FILENO);
    open("/dev/null", O_RDONLY);  // STDIN
    open("/dev/null", O_WRONLY);  // STDOUT
    open("/dev/null", O_RDWR);    // STDERR

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    signal(SIGTERM, signalHandler);
    signal(SIGINT, signalHandler);

    std::ofstream log("daemon.log", std::ios::app);
    std::cerr.rdbuf(log.rdbuf());
    std::cout.rdbuf(log.rdbuf());


    const std::string configPath = "config.json";

    VaultService vault(".filevault");
    ChecksumService checksum;
    InitializationService initializer(vault, checksum);
    StatePersistenceService dbService("tracking.db");
    dbService.initializeSchema();

    InotifyWatcher watcher;
    std::vector<TrackingFile> trackedFiles;

    auto setupFileWatchers = [&](std::vector<TrackingFile>& files) {
        for (auto& file : files) {
            std::string path = file.filePath;
            std::string fileId = file.fileId;
            std::string lastChecksum = file.lastChecksum;

            watcher.addWatch(path, [&, path, fileId, lastChecksum](uint32_t mask) mutable {
                std::cout << "üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: " << path << std::endl;

                if (mask & IN_MODIFY) {
                    std::cout << "  ‚Üí –§–∞–π–ª –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ö–µ—à..." << std::endl;
                    try {
                        std::string newChecksum = checksum.compute(path);
                        if (newChecksum != lastChecksum) {
                            FileChange change;
                            change.timestamp = std::chrono::system_clock::now();
                            change.checksum = newChecksum;
                            change.savedVersionId = vault.save(path);

                            dbService.saveFileChange(fileId, change);
                            dbService.updateTrackingFileChecksum(fileId, newChecksum);
                            lastChecksum = newChecksum;

                            std::cout << "  ‚úî –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ —Ö–µ—à –æ–±–Ω–æ–≤–ª—ë–Ω." << std::endl;
                        } else {
                            std::cout << "  ‚Ü™ –•–µ—à –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è" << std::endl;
                        }
                    } catch (const std::exception& ex) {
                        std::cerr << "  ‚ö† –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã: " << ex.what() << std::endl;
                    }
                }

                if (mask & IN_DELETE) {
                    std::cout << "  ‚ö† –§–∞–π–ª –±—ã–ª —É–¥–∞–ª—ë–Ω" << std::endl;
                    dbService.updateTrackingFileMissing(fileId, true);
                }
            });
        }

    };

    std::function<void()> reloadConfiguration = [&]() {
        std::cout << "\nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." << std::endl;
        try {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
            watcher.clearWatches();

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
            trackedFiles = loadAndProcessConfiguration(configPath, initializer, checksum, vault, dbService);
            setupFileWatchers(trackedFiles);

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            watcher.addWatch(configPath, [&](uint32_t mask) {
                if (mask & IN_MODIFY) {
                    reloadConfiguration();
                }
            });

            std::cout << "‚úî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤: " << trackedFiles.size() << std::endl;
        } catch (const std::exception& ex) {
            std::cerr << "  ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " << ex.what() << std::endl;
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    reloadConfiguration();
    // setupFileWatchers();
    watcher.start();

    std::cout << "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞..." << std::endl;
    // std::cin.get();
    while (true) {
        std::this_thread::sleep_for(std::chrono::hours(24));
    }

    watcher.stop();
    return 0;
}
